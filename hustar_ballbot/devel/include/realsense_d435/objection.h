// Generated by gencpp from file realsense_d435/objection.msg
// DO NOT EDIT!


#ifndef REALSENSE_D435_MESSAGE_OBJECTION_H
#define REALSENSE_D435_MESSAGE_OBJECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point32.h>

namespace realsense_d435
{
template <class ContainerAllocator>
struct objection_
{
  typedef objection_<ContainerAllocator> Type;

  objection_()
    : classname()
    , classID(0)
    , center_point()
    , point_cloud()  {
    }
  objection_(const ContainerAllocator& _alloc)
    : classname(_alloc)
    , classID(0)
    , center_point(_alloc)
    , point_cloud(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _classname_type;
  _classname_type classname;

   typedef uint8_t _classID_type;
  _classID_type classID;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_point_type;
  _center_point_type center_point;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _point_cloud_type;
  _point_cloud_type point_cloud;





  typedef boost::shared_ptr< ::realsense_d435::objection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_d435::objection_<ContainerAllocator> const> ConstPtr;

}; // struct objection_

typedef ::realsense_d435::objection_<std::allocator<void> > objection;

typedef boost::shared_ptr< ::realsense_d435::objection > objectionPtr;
typedef boost::shared_ptr< ::realsense_d435::objection const> objectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_d435::objection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_d435::objection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_d435::objection_<ContainerAllocator1> & lhs, const ::realsense_d435::objection_<ContainerAllocator2> & rhs)
{
  return lhs.classname == rhs.classname &&
    lhs.classID == rhs.classID &&
    lhs.center_point == rhs.center_point &&
    lhs.point_cloud == rhs.point_cloud;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_d435::objection_<ContainerAllocator1> & lhs, const ::realsense_d435::objection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_d435

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::realsense_d435::objection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_d435::objection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_d435::objection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_d435::objection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_d435::objection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_d435::objection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_d435::objection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a84050c2eec09fc0e86c5e0c8e8e706";
  }

  static const char* value(const ::realsense_d435::objection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a84050c2eec09fcULL;
  static const uint64_t static_value2 = 0x0e86c5e0c8e8e706ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_d435::objection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_d435/objection";
  }

  static const char* value(const ::realsense_d435::objection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_d435::objection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string classname\n"
"uint8  classID\n"
"geometry_msgs/Point center_point\n"
"geometry_msgs/Point32[] point_cloud\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::realsense_d435::objection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_d435::objection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classname);
      stream.next(m.classID);
      stream.next(m.center_point);
      stream.next(m.point_cloud);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_d435::objection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_d435::objection_<ContainerAllocator>& v)
  {
    s << indent << "classname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.classname);
    s << indent << "classID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classID);
    s << indent << "center_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center_point);
    s << indent << "point_cloud[]" << std::endl;
    for (size_t i = 0; i < v.point_cloud.size(); ++i)
    {
      s << indent << "  point_cloud[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.point_cloud[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_D435_MESSAGE_OBJECTION_H
